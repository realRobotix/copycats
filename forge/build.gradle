plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2"
    id 'me.modmuss50.mod-publish-plugin' version "0.5.1"
}

def secrets = new Properties()
if (file("./../secrets.properties").exists()) {
    file("./../secrets.properties").withInputStream {
        stream -> secrets.load(stream)
    }
}

loom {

    accessWidenerPath = project(":common").loom.accessWidenerPath
    forge {
        mixinConfig "copycats-common.mixins.json"
        mixinConfig "copycats-forge.mixins.json"
        convertAccessWideners = true
        extraAccessWideners.add(loom.accessWidenerPath.get().asFile.name)
    }

    runs {
        client {
            vmArg "-XX:+AllowEnhancedClassRedefinition"
        }
        server {
            vmArg "-XX:+AllowEnhancedClassRedefinition"
        }
        data {
            data()
            name "Data Generation"
            programArgs "--all", "--mod", "copycats"
            programArgs "--output", file("src/generated/resources").absolutePath
            programArgs "--existing", project(":common").file("src/main/resources").absolutePath
            programArgs "--existing-mod", "create"
        }
    }

}
architectury {
    platformSetupLoomIde()
    forge()
}


configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin since it *excludes* files.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentForge.extendsFrom common
}

dependencies {
    forge "net.minecraftforge:forge:${forge_version}"

    // Create and its dependencies
    modImplementation("com.simibubi.create:create-${minecraft_version}:${create_forge_version}:slim") { transitive = false }
    modImplementation("com.tterrag.registrate:Registrate:${registrate_forge_version}")
    modImplementation("com.jozufozu.flywheel:flywheel-forge-${minecraft_version}:${flywheel_forge_version}")

    modLocalRuntime "curse.maven:jade-324717:${jade_forge_curse_id}"
    modLocalRuntime("mezz.jei:jei-${minecraft_version}-forge:${jei_forge_version}")

    modLocalRuntime("curse.maven:rubidium-574856:${rubidium_forge_curse_id}")
    modImplementation("curse.maven:additional-placements-674852:${additionalplacements_forge_curse_id}")

    modCompileOnly("curse.maven:double-slabs-350179:${double_slabs_curse_id}")

    compileOnly("io.github.llamalad7:mixinextras-common:${mixin_extras_version}")
    annotationProcessor(implementation(include("io.github.llamalad7:mixinextras-forge:${mixin_extras_version}")))

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionForge")) { transitive = false }
}

processResources {
    inputs.property "version", project.version

    filesMatching("META-INF/mods.toml") {
        expand "version": project.version
    }
}

shadowJar {
    exclude "fabric.mod.json"

    configurations = [project.configurations.shadowCommon]
    archiveClassifier = "dev-shadow"
}

remapJar {
    inputFile.set(shadowJar.archiveFile)
    dependsOn shadowJar
    archiveClassifier.set(null)
}

sourceSets {
    main {
        resources.srcDir 'src/generated/resources'
    }
}

jar {
    archiveClassifier.set("dev")
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

publishing {
    publications {
        mavenForge(MavenPublication) {
            artifactId = archives_base_name + "-" + project.name
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
    }
}

tasks.publishMods.dependsOn(tasks.assemble)
tasks.publishMods.mustRunAfter(tasks.build)

publishMods {
    changelog = "Check out the detailed changelog at https://github.com/copycats-plus/copycats/blob/multiloader/CHANGELOG.md"
    type = STABLE
    file = tasks.remapJar.archiveFile
    displayName = file.map { it.asFile.name.substring(0, it.asFile.name.lastIndexOf('.')) }
    modLoaders.add("forge")

    modrinth {
        accessToken = secrets.MODRINTH_TOKEN
        projectId = "UT2M39wf"
        minecraftVersions.add(minecraft_version)

        requires {
            id = "LNytGWDc"
        }
        optional {
            id = "u6dRKJwZ"
        }
    }

    curseforge {
        accessToken = secrets.CURSEFORGE_TOKEN
        projectId = "968398"
        minecraftVersions.add(minecraft_version)
    }
}