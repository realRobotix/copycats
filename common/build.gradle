architectury {
    common(enabled_platforms.split(","))
}

loom {
    accessWidenerPath = file("src/main/resources/copycats.accesswidener")
}

dependencies {
    // We depend on fabric loader here to use the fabric @Environment annotations and get the mixin dependencies
    // Do NOT use other classes from fabric loader
    modImplementation "net.fabricmc:fabric-loader:${fabric_loader_version}"

    // Compile against Create Fabric in common
    // beware of differences across platforms!
    // dependencies must also be pulled in to minimize problems, from remapping issues to compile errors.
    // All dependencies except Flywheel and Registrate are NOT safe to use!
    // Flywheel and Registrate must also be used carefully due to differences.
    modCompileOnly("com.simibubi.create:create-fabric-${minecraft_version}:${create_fabric_version}")
    // required for proper remapping and compiling
    modCompileOnly("net.fabricmc.fabric-api:fabric-api:${fabric_api_version}")
    modCompileOnly("mezz.jei:jei-${minecraft_version}-common-api:${jei_common_version}")

    modCompileOnly("curse.maven:additional-placements-930469:${additionalplacements_curse_id}")
    modCompileOnly("curse.maven:rubidium-574856:${rubidium_curse_id}")

    annotationProcessor(implementation("io.github.llamalad7:mixinextras-common:${mixin_extras_version}"))
}

publishing {
    publications {
        mavenCommon(MavenPublication) {
            artifactId = archives_base_name
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
    }
}
