plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2"
    id 'me.modmuss50.mod-publish-plugin' version "0.5.1"
}

architectury {
    platformSetupLoomIde()
    fabric()
}

loom {

    runs {
        client {
            vmArg "-XX:+AllowEnhancedClassRedefinition"
        }
        server {
            vmArg "-XX:+AllowEnhancedClassRedefinition"
        }
        create("datagen") {
            client()

            name = "Data Generation"
            vmArg "-Dfabric-api.datagen"
            vmArg "-Dfabric-api.datagen.output-dir=${project(":fabric").file("src/generated/resources")}"
            vmArg "-Dfabric-api.datagen.modid=copycats"
            vmArg "-Dporting_lib.datagen.existing_resources=${project(":common").file("src/main/resources")}"
            vmArg "-Dporting_lib.datagen.existing-mod=create"

            environmentVariable("DATAGEN", "TRUE")
        }
    }
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin since it *excludes* files.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentFabric.extendsFrom common
}

dependencies {
    modImplementation "net.fabricmc:fabric-loader:${fabric_loader_version}"
    modApi "net.fabricmc.fabric-api:fabric-api:${fabric_api_version}"

    modImplementation("com.simibubi.create:create-fabric-${minecraft_version}:${create_fabric_version}")
    // because create fabric is a bit broken I think
    modImplementation("net.minecraftforge:forgeconfigapiport-fabric:${config_port_version}")

    modLocalRuntime "curse.maven:jade-324717:${jade_fabric_curse_id}"
    modLocalRuntime("mezz.jei:jei-${minecraft_version}-fabric:${jei_fabric_version}")

    modImplementation "curse.maven:continuity-531351:${continuity_curse_version}"

    annotationProcessor(implementation(include("io.github.llamalad7:mixinextras-fabric:${mixin_extras_version}")))

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionFabric")) { transitive false }
}

sourceSets {
    main {
        resources.srcDir 'src/generated/resources'
    }
}

processResources {
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

shadowJar {
    configurations = [project.configurations.shadowCommon]
    archiveClassifier = "dev-shadow"
}

remapJar {
    injectAccessWidener = true
    inputFile.set(shadowJar.archiveFile)
    dependsOn shadowJar
    archiveClassifier = null
}

jar {
    archiveClassifier.set("dev")
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

tasks.publishMods.dependsOn(tasks.assemble)
tasks.publishMods.mustRunAfter(tasks.build)

publishMods {
    changelog = "Check out the detailed changelog at https://github.com/copycats-plus/copycats/blob/multiloader/CHANGELOG.md"
    type = STABLE
    file = tasks.remapJar.archiveFile
    displayName = file.map { it.asFile.name.substring(0, it.asFile.name.lastIndexOf('.')) }
    modLoaders.add("fabric")

    modrinth {
        accessToken = project.findProperty("MODRINTH_TOKEN")
        projectId = "UT2M39wf"
        minecraftVersions.add(minecraft_version)

        requires {
            id = "Xbc0uyRg"
        }
        optional {
            id = "u6dRKJwZ"
        }
    }

    curseforge {
        accessToken = project.findProperty("CURSEFORGE_TOKEN")
        projectId = "968398"
        minecraftVersions.add(minecraft_version)
    }

    dryRun = Boolean.parseBoolean(doDryRun)
}