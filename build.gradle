plugins {
    id "architectury-plugin" version "3.4-SNAPSHOT"
    id "dev.architectury.loom" version "1.5.+" apply false
}

boolean ci = System.getenv("CI") != null ? System.getenv("CI").toBoolean() : false
boolean nightly = ci && (System.getenv("RELEASE") != null ? !System.getenv("RELEASE").toBoolean() : true)

def getGitTag = { ->
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine "git", "describe", "--tags", "--abbrev=0"
        standardOutput = stdout
    }
    return stdout.toString().trim().takeBetween("v", "+")
}

architectury {
    minecraft = rootProject.minecraft_version
}

subprojects {
    apply plugin: "dev.architectury.loom"
    apply plugin: "maven-publish"

    loom {
        silentMojangMappingsLicense()
    }

    dependencies {
        minecraft "com.mojang:minecraft:${rootProject.minecraft_version}"
        mappings loom.layered() {
            officialMojangMappings()
            parchment("org.parchmentmc.data:parchment-${rootProject.minecraft_version}:${rootProject.parchment_version}@zip")
        }
    }

    publishing {
        publications {
            mavenJava(MavenPublication) {
                artifactId = rootProject.archives_base_name
                from components.java
            }
        }
        repositories {
            maven {
                name = "GitHubPackages"
                url = "https://maven.pkg.github.com/copycats-plus/copycats"
                credentials {
                    username = project.findProperty("gpr.user") ?: System.getenv("GITHUB_ACTOR")
                    password = project.findProperty("gpr.key") ?: System.getenv("GITHUB_TOKEN")
                }
            }
            maven {
                name = "realRobotixMaven"
                url = "https://maven.realrobotix.me/copycats"
                credentials(PasswordCredentials)
            }
        }
    }
}

allprojects {
    apply plugin: "java"
    apply plugin: "architectury-plugin"
    apply plugin: "maven-publish"


    archivesBaseName = rootProject.archives_base_name
    String buildNumber = System.getenv("GITHUB_RUN_NUMBER")
    version = "${getGitTag()}+mc.${minecraft_version}-${project.name}${nightly ? "-build.${buildNumber}" : ""}"
    group = rootProject.maven_group

    repositories {
        maven {
            name = 'ParchmentMC'
            url = 'https://maven.parchmentmc.org'
        }
        maven {
            name = 'tterrag maven'
            url = 'https://maven.tterrag.com/'
        }
        maven {
            // location of the maven that hosts JEI files before January 2023
            name = "Progwml6's maven"
            url = "https://dvs1.progwml6.com/files/maven/"
        }
        maven {
            // location of the maven that hosts JEI files since January 2023
            name = "Jared's maven"
            url = "https://maven.blamejared.com/"
        }
        maven {
            // location of a maven mirror for JEI files, as a fallback
            name = "ModMaven"
            url = "https://modmaven.dev"
        }
        maven {
            url = "https://cursemaven.com"
        }
        mavenCentral()
        maven {
            url = "https://mvn.devos.one/snapshots/"
        }
        maven { url = "https://mvn.devos.one/releases/" }
        maven {
            url = "https://cursemaven.com"
        }
        maven {
            url = "https://jitpack.io"
        }
        maven { // Reach Entity Attributes
            url = "https://maven.jamieswhiteshirt.com/libs-release"
            content { includeGroup("com.jamieswhiteshirt") }
        }
        maven {
            //Forge Config Api Port
            url = "https://raw.githubusercontent.com/Fuzss/modresources/main/maven/"
        }
        maven { // for Porting Lib: Mixin Extras, Fabric ASM
            url = "https://jitpack.io/"
            content { includeGroupAndSubgroups("com.github") }
        }
    }

    tasks.withType(JavaCompile).configureEach {
        options.encoding = "UTF-8"
        options.release.set(17)
    }

    jar {
        processResources.exclude("assets/copycats/models/block/copycat_base/README.md")
    }

    tasks.named('processResources', ProcessResources).configure {
        duplicatesStrategy(DuplicatesStrategy.EXCLUDE)
        // include packs
        from(project(":common").file("src/main/resources")) {
            include("resourcepacks/")
        }

        // set up properties for filling into metadata
        var replaceProperties = [
                version              : version.replace("forge.", "").replace("fabric.", ""),
                minecraft_version    : minecraft_version,
                fabric_api_version   : fabric_api_version,
                fabric_loader_version: fabric_loader_version,
                create_forge_range   : create_forge_range,
                create_fabric_range  : create_fabric_range,
                mod_license          : mod_license,
                mod_authors          : mod_authors,
                mod_name             : mod_name,
                mod_description      : mod_description
        ]

        inputs.properties replaceProperties

        filesMatching(["fabric.mod.json", "META-INF/mods.toml"]) {
            expand replaceProperties + [project: project]
        }
    }

    java {
        withSourcesJar()
    }
}
